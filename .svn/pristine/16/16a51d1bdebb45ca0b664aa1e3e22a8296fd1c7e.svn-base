/**
 * Module dependencies.
 */

var express = require('express'),
	routes = require('./routes'),
	api = require('./routes/api');
var configParameters = require('./conf/config.js').configuration();


var mysql = require('mysql');
var Sequelize = require('sequelize');

var app = module.exports = express();

//mysql coonection  
var sequelize = new Sequelize(configParameters.db, configParameters.username, configParameters.password, {
	dialect: "mysql",
	port: 3306,
	define: {
		timestamps: false,
	}
});

sequelize
	.authenticate()
	.complete(function (err) {
		if (!!err) {
			console.log('Can not connect Database:', err)
		} else {
			console.log('Connected Database successfully.')
		}
	})

var user = sequelize.define('user', {
	usertype: {
		type: Sequelize.ENUM('MERCHANT', 'BIDDER'),
		defaultValue: 'BIDDER',
		allowNull: true,
		validate: {
			is: ["^[a-z]+$", 'i'],
			notNull: false
		}
	},
	name: {
		type: Sequelize.STRING,
		allowNull: false,
		validate: {
			notEmpty: true,
			notNull: true,
			len: {
				args: 3,
				msg: "Name must be atleast 3 characters in length"
			}
		}
	},
	email: {
		type: Sequelize.STRING,
		allowNull: false,
		unique: true,
		validate: {
			notEmpty: true,
			notNull: true,
			len: {
				args: [6, 128],
				msg: "Email address must be between 6 and 128 characters in length"
			},
			isEmail: {
				msg: "Email address must be valid"
			}
		}
	},
	password: {
		type: Sequelize.STRING,
		allowNull: false,
		validate: {
			notEmpty: true,
			notNull: true,
			len: {
				args: 3
			}
		}
	},
	companyname: {
		type: Sequelize.STRING,
		allowNull: true,
		validate: {
			notNull: false,
			len: {
				args: 3,
				msg: "Name must be atleast 3 characters in length"
			}
		}
	},
	phone: {
		type: Sequelize.STRING,
		allowNull: true,
		validate: {
			isNumeric: true,
			notNull: false,
			len: {
				args: 10,
				msg: "Phone Number must be atleast 10 Integer in length"
			}
		}
	},
	companydes: {
		type: Sequelize.TEXT,
		allowNull: true,
		validate: {
			notNull: false
		}
	},
	logo: {
		type: Sequelize.STRING,
		allowNull: true,
		validate: {
			notNull: false
		}
	},
	delflag: {
		type: Sequelize.BOOLEAN,
		allowNull: false,
		defaultValue: false,
		validate: {
			notNull: true
		}
	}
});

var blurb = sequelize.define('blurb', {
	link: {
		type: Sequelize.STRING,
		allowNull: true,
		validate: {
			notNull: false,
		}
	},
	minoffer: {
		type: Sequelize.BIGINT,
		validate: {
			notNull: true,
			notEmpty: true
		}
	},
	title: {
		type: Sequelize.STRING,
		allowNull: false,
		unique: true,
		validate: {
			notEmpty: true,
			notNull: true
		}
	},
	description: {
		type: Sequelize.TEXT,
		allowNull: true,
		validate: {
			notNull: false
		}
	},
	url: {
		type: Sequelize.STRING,
		allowNull: true,
		validate: {
			notNull: false,
			isUrl: true
		}
	},
	fileName: {
		type: Sequelize.STRING,
		allowNull: true,
		validate: {
			notNull: false
		}
	},
	delflag: {
		type: Sequelize.BOOLEAN,
		allowNull: false,
		defaultValue: false,
		validate: {
			notNull: true
		}
	},
	orgfilename: {
		type: Sequelize.STRING,
		allowNull: true,
		validate: {
			notNull: false
		}
	}

});
user.hasMany(blurb, {
	foreignKey: 'user_id'
});
blurb.belongsTo(user, {
	foreignKey: 'user_id'
});

var offer = sequelize.define('offer', {
	offerprice: {
		type: Sequelize.BIGINT,
		allowNull: false,
		validate: {
			notEmpty: true,
			notNull: true
		}
	},
	time: {
		type: Sequelize.DATE,
		defaultValue: Sequelize.NOW
	},
	//    usid: {
	//        type: Sequelize.INTEGER,
	//        allowNull: false,
	//        references: 'user',
	//        referencesKey: 'id',
	//        validate: {
	//            notNull: true
	//        }
	//    },
	//    blid: {
	//        type: Sequelize.INTEGER,
	//        allowNull: false,
	//        references: 'blurb',
	//        referencesKey: 'id',
	//        validate: {
	//            notNull: true
	//        }
	//    },
});
user.hasMany(offer, {
	foreignKey: 'user_Id'
});
offer.belongsTo(user, {
	foreignKey: 'user_Id'
});

blurb.hasMany(offer, {
	foreignKey: 'blurb_Id'
});
offer.belongsTo(blurb, {
	foreignKey: 'blurb_Id'
});

var subscribe = sequelize.define('subscribe', {
	//    subusid: {
	//        type: Sequelize.INTEGER,
	//        allowNull: false,
	//        references: 'user',
	//        referencesKey: 'id',
	//        validate: {
	//            notNull: true
	//        }
	//    },
	//    subblid: {
	//        type: Sequelize.INTEGER,
	//        allowNull: false,
	//        references: 'blurb',
	//        referencesKey: 'id',
	//        validate: {
	//            notNull: true
	//        }
	//    },
});
user.hasMany(subscribe, {
	foreignKey: 'user_ID'
});
subscribe.belongsTo(user, {
	foreignKey: 'user_ID'
});


blurb.hasMany(subscribe, {
	foreignKey: 'blurb_ID'
});
subscribe.belongsTo(blurb, {
	foreignKey: 'blurb_ID'
});

sequelize
	.sync({
		force: false
	})
	.complete(function (err) {
		if (!!err) {
			console.log('An error occurred:', err)
		} else {
			console.log('Table created')
		}
	})



// Configuration
app.configure(function () {
	app.use(express.bodyParser({
		uploadDir: './uploads',
		keepExtensions: true
	}));
	app.use(express.methodOverride());
	app.use(express.static(__dirname + '/public'));
	app.use(app.router);
});

app.configure('development', function () {
	app.use(express.errorHandler({
		dumpExceptions: true,
		showStack: true
	}));
});

app.configure('production', function () {
	app.use(express.errorHandler());
});

app.configure('staging', function () {
	app.use(express.errorHandler());
});

console.log(process.env.NODE_ENV);


//var environment = process.env.NODE_ENV || 'development';



// Routes

app.get('/', routes.index);
app.get('/partials/:name', routes.partials);

// JSON API

app.post('/signup', api.userSignup(sequelize, user));
app.post('/signin', api.userLogin(sequelize, user));
app.post('/checkemail', api.checkEmail(sequelize, user));
app.post('/forgot', api.forgot(sequelize, user));

app.get('/user', api.userOne(sequelize, user));

app.put('/user', api.userUpdate(sequelize, user));

//get all blurbs by userid
app.get('/blurb/userBlurb', api.allBlurb(sequelize, blurb));
app.post('/blurb', api.blurbAdd(sequelize, blurb, user));
app.delete('/blurb/:id', api.blurbDelete(sequelize, blurb));
app.put('/blurb/:id', api.blurbUpdate(sequelize, blurb));
app.get('/blurbs/:id', api.blurbOne(sequelize, blurb));


//get blurb detail by blurbid along with user detail (user who created the blurb)
app.get('/blurb/detail/:id', api.blurbGet(sequelize, blurb));

//get all offers by blurb id
app.get('/blurb/offer/:id', api.blurbofferHistory(sequelize, offer));

// Make Offer
app.post('/offer', api.offerAdd(sequelize, offer, blurb));

// MAIN PAGE
app.get('/offer', api.offerGet(sequelize, offer));

// Current BID
app.get('/offer/maxoffer/:id', api.maxofferbyblurbid(sequelize, blurb, offer));

// Add Subscribe
app.post('/subscribe', api.subscribeAdd(sequelize, subscribe));

//Get subscribe entry by user ID
app.get('/checkSubscription/:blurb_Id', api.checkSubscription(sequelize, subscribe));

//uploads
app.post('/blurbfileupload/:id', api.blurbfileupload(sequelize, blurb));
app.post('/userimageupload/:id', api.userimageupload(sequelize, user));

//downloads
app.get('/blurbfiledownload/:id', api.blurbfiledownload(sequelize, blurb));

// Logot API
app.get('/logout', function (req, res) {
	res.clearCookie('id')
	res.redirect('/offer');
});

//app.get('/user', api.userAll(sequelize, user));
//app.post('/user', api.userAdd(sequelize, user));
//app.delete('/user', api.userDelete(sequelize, user));
//app.get('/blurb', api.blurbAll(sequelize, blurb));
// redirect all others to the index (HTML5 history)
app.get('*', routes.index);

// Start server
app.listen(configParameters.port, function () {
	console.log("Express server listening on port %d in %s mode", this.address().port, app.settings.env);
});